{"version":3,"sources":["assets/png/React.png","assets/png/lock.png","components/login/LoginComponents.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Login","react_default","a","createElement","class","id","src","LockIcon","alt","ReactIcon","type","placeholder","value","App","className","LoginComponents","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oPCuCzBC,MAlCf,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACPH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,cACJJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAUF,GAAG,YAAYG,IAAI,SACvCP,EAAAC,EAAAC,cAAA,KAAGE,GAAG,QAAN,OACAJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKG,IAAWJ,GAAG,aAAaG,IAAI,SAAaP,EAAAC,EAAAC,cAAA,WACtDF,EAAAC,EAAAC,cAAA,oCAA8BF,EAAAC,EAAAC,cAAA,YAElCF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,eACJJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,SACJJ,EAAAC,EAAAC,cAAA,mBAEJF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YACJJ,EAAAC,EAAAC,cAAA,uBAGRF,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QACJJ,EAAAC,EAAAC,cAAA,OAAKC,MAAM,cACXH,EAAAC,EAAAC,cAAA,wBAAkBF,EAAAC,EAAAC,cAAA,WAClBF,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAON,MAAM,eAAeC,GAAG,WAAWM,YAAY,oBAA0BV,EAAAC,EAAAC,cAAA,YAE5FF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,cACXH,EAAAC,EAAAC,cAAA,wBAAkBF,EAAAC,EAAAC,cAAA,WAClBF,EAAAC,EAAAC,cAAA,SAAOO,KAAK,WAAWN,MAAM,eAAeC,GAAG,WAAWM,YAAY,qBAEtEV,EAAAC,EAAAC,cAAA,OAAKC,MAAM,eACXH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,SAASN,MAAM,GAAGQ,MAAM,qBCnBrCC,MATf,WACE,OACEZ,EAAAC,EAAAC,cAAA,OAAKW,UAAU,cACbb,EAAAC,EAAAC,cAACY,EAAD,MACAd,EAAAC,EAAAC,cAAA,gBCIca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b19d2917.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/React.47ce6e77.png\";","module.exports = __webpack_public_path__ + \"static/media/lock.2ad58311.png\";","import React from 'react';\r\nimport './LoginComponent.css';\r\nimport ReactIcon from '../../assets/png/React.png';\r\nimport LockIcon from '../../assets/png/lock.png';\r\n\r\nfunction Login() {\r\n    return(\r\n        <div class=\"login-box\">\r\n            <div id=\"header-box\">\r\n                <img src={LockIcon} id=\"lock-logo\" alt=\"logo\"></img>\r\n                <b id=\"plus\"> + </b>\r\n                <img src={ReactIcon} id=\"react-logo\" alt=\"Logo\"></img><br />\r\n                <b>Simple Login with React</b><br />\r\n            </div>\r\n            <div id=\"content-box\">\r\n                <div id=\"login\">\r\n                    <b>Login</b>\r\n                </div>\r\n                <div id=\"register\">\r\n                    <b>Register</b>\r\n                </div>\r\n            </div>\r\n            <div id=\"form\">\r\n                <div class=\"form-input\">\r\n                <b>Username : </b><br />\r\n                <input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"Input username.\"></input><br />\r\n                </div>\r\n                <div class=\"form-input\">\r\n                <b>Password : </b><br />\r\n                <input type=\"password\" class=\"form-control\" id=\"password\" placeholder=\"Input password.\"></input>\r\n                </div>\r\n                <div class=\"form-submit\">\r\n                <input type=\"submit\" class=\"\" value=\"submit\"></input>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;","import React from 'react';\nimport LoginComponents from './components/login/LoginComponents.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"background\">\n      <LoginComponents />\n      <b>s</b>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}